function [output] = aesinfo(s, verb)
% AESINFO Display info about AES setting in AES structure.
% Usage:            out = aesinfo(s)
% s:                AES structure (generated by aesinit)
% verb:             verbose = 0 ... only key displayed
%                   verbose = 1 ... print all vectors/tables, words
%                                   in little-endian byte order
%                   verbose = 2 ... print all vectors/tables, words
%                                   in big-endian byte order
% output:           AES key length (128,192, or 256 bits)

% Stepan Matejka, 2011, matejka[at]feld.cvut.cz
% $Revision: 1.1.0 $  $Date: 2011/10/12 $

error(nargchk(1, 2, nargin));

validateattributes(s, {'struct'}, {});
if (nargin >= 2)
    validateattributes(verb, {'numeric'}, {'real', 'scalar', '>=', 0, '<=', 2});
else
    verb = 0;
end

% to screen
ID = 1;

fprintf(ID, 'AES Type: AES-%d\n', s.length);
fprintf(ID, 'AES Rounds: %d\n', s.rounds);
fprintf(ID, 'GF(2^8) modulo poly: 0x%03x\n', s.mod_pol);
fprintf(ID, 'Key (%d bits/%d bytes):\n', s.length, s.bytes);
printaryh(ID, 'key8', s.key, 1, 8, 1);
if (verb)
    printaryh(ID, 'key16', s.key, 2, 8, verb);
    printaryh(ID, 'key32', s.key, 4, 4, verb);
    fprintf(ID, 'Expanded Key (%d bytes/%d words):\n', numel(s.keyexp), numel(s.keyexp)/4);
    printaryh(ID, 'expkey8', s.keyexp', 1, 8, verb);
    printaryh(ID, 'expkey32', s.keyexp', 4, 4, verb);
    fprintf(ID, 'Log table (%d bytes):\n', numel(s.aes_logt));
    printaryh(ID, 'logt8', s.aes_logt, 1, 8, verb);
    fprintf(ID, 'Inverse log table (%d bytes):\n', numel(s.aes_ilogt));
    printaryh(ID, 'ilogt8', s.aes_ilogt, 1, 8, verb);
    fprintf(ID, 'S-Box table (%d bytes):\n', numel(s.s_box));
    printaryh(ID, 'sbox8', s.s_box, 1, 8, verb);
    fprintf(ID, 'Inverse S-Box table (%d bytes):\n', numel(s.inv_s_box));
    printaryh(ID, 'isbox8', s.inv_s_box, 1, 8, verb);
    if (0)
        fprintf(ID, 'Mix-col 2 (%d bytes):\n', numel(s.mix_col2));
        printaryh(ID, 'mixcol2', s.mix_col2, 1, 8, verb);
        fprintf(ID, 'Mix-col 3 (%d bytes):\n', numel(s.mix_col3));
        printaryh(ID, 'mixcol3', s.mix_col3, 1, 8, verb);
        fprintf(ID, 'Mix-col 9 (%d bytes):\n', numel(s.mix_col9));
        printaryh(ID, 'mixcol9', s.mix_col9, 1, 8, verb);
        fprintf(ID, 'Mix-col 11 (%d bytes):\n', numel(s.mix_col11));
        printaryh(ID, 'mixcol11', s.mix_col11, 1, 8, verb);
        fprintf(ID, 'Mix-col 13 (%d bytes):\n', numel(s.mix_col13));
        printaryh(ID, 'mixcol13', s.mix_col13, 1, 8, verb);
        fprintf(ID, 'Mix-col 14 (%d bytes):\n', numel(s.mix_col14));
        printaryh(ID, 'mixcol14', s.mix_col14, 1, 8, verb);
    end
end
output = s.length;

% ------------------------------------------------------------------------
function printaryh(ID, name, data, pack, ionline, verb)
% print byte ary data like C ary
if (verb == 0)
    return;
end
data = data(:);
% pack:
switch (pack)
    case 1
        items = length(data);
        vartype = 'u8';
        format = '0x%02x';
    case 2
        items = length(data)/2;
        data = reshape(data,2,items)';
        if (verb == 2)
            data = fliplr(data);
        end
        data = sum(data.*repmat([1 256], items, 1), 2);
        vartype = 'u16';
        format = '0x%04x';
    case 4
        items = length(data)/4;
        data = reshape(data,4,items)';
        if (verb == 2)
            data = fliplr(data);
        end
        data = sum(data.*repmat([1 256 65536 65536*256], items, 1), 2);
        vartype = 'u32';
        format = '0x%08x';
    otherwise
        error('Usupported pack parameter.')
end
fprintf(ID, '%s %s[%d] = {\n', vartype, name, items);
for i = 1:items
    if (rem(i - 1, ionline) == 0)
        fprintf(ID,'        ');
    end
    fprintf(ID, format, data(i));
    if (i == items)
        fprintf(ID,'};\n');
        break;
    end
    if (rem(i, ionline) == 0)
        fprintf(ID,',\n');
    else
        fprintf(ID,', ');
    end
end

% ------------------------------------------------------------------------
% end of file
